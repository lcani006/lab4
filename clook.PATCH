--- noop-iosched.c	2012-11-05 03:57:06.000000000 -0500
+++ clook-iosched.c	2019-11-29 16:45:06.962581623 -0500
@@ -1,5 +1,6 @@
 /*
- * elevator noop
+ * Author: Leonardo Canizares
+ * elevator clook
  */
 #include <linux/blkdev.h>
 #include <linux/elevator.h>
@@ -8,41 +9,100 @@
 #include <linux/slab.h>
 #include <linux/init.h>
 
-struct noop_data {
+int dh = -1; //keeps track of diskhead position
+
+struct clook_data {
 	struct list_head queue;
 };
 
-static void noop_merged_requests(struct request_queue *q, struct request *rq,
+static void clook_merged_requests(struct request_queue *q, struct request *rq,
 				 struct request *next)
 {
 	list_del_init(&next->queuelist);
 }
 
-static int noop_dispatch(struct request_queue *q, int force)
+/*
+ * clook_dispatch modified to implement clook algorithm
+ * 
+ */
+static int clook_dispatch(struct request_queue *q, int force)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct clook_data *nd = q->elevator->elevator_data;
+	char direction;
 
 	if (!list_empty(&nd->queue)) {
 		struct request *rq;
 		rq = list_entry(nd->queue.next, struct request, queuelist);
 		list_del_init(&rq->queuelist);
 		elv_dispatch_sort(q, rq);
+		dh = blk_rq_pos(rq);//update diskhead position
+
+		//print statement formating
+		if(rq_data_dir(rq)){
+			direction = 'W';
+		} else {
+			direction = 'R';
+		}
+	
+		printk("[CLOOK] dsp %c %lu\n", direction, blk_rq_pos(rq));
+
 		return 1;
 	}
 	return 0;
 }
 
-static void noop_add_request(struct request_queue *q, struct request *rq)
+/*
+ * clook_add_request modified to implement clook algorithm
+ * 
+ */
+static void clook_add_request(struct request_queue *q, struct request *rq)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct clook_data *nd = q->elevator->elevator_data;
+	struct list_head *cur = NULL; //pointer for current entry
+	char direction;
+
+	//iterate through request queue
+	list_for_each(cur, &nd->queue){
+
+		struct request *entry = list_entry(cur, struct request, queuelist);
+
+		if (blk_rq_pos(rq) > dh)
+		{
+			// If the current position less than diskhead OR rq position less than current position
+			//break and add to current position
+			if(blk_rq_pos(entry) < dh || blk_rq_pos(rq) < blk_rq_pos(entry))
+				break;
+			
+		} else {
+			// current position less than disk head
+			// If the current position less than diskhead AND rq position less than current position 
+			//break and add to cur position
+			if(blk_rq_pos(entry) < dh && blk_rq_pos(rq) < blk_rq_pos(entry))
+				break;
+		}
+
+	}
+
+	//add request to queue
+	list_add_tail(&rq->queuelist, cur);
+
+	//print statement formating
+	if(rq_data_dir(rq)){
+		direction = 'W';
+	} else {
+		direction = 'R';
+	}
+
+	//added debug print statement
+	printk("[CLOOK] add %c %lu\n", direction, blk_rq_pos(rq));
 
-	list_add_tail(&rq->queuelist, &nd->queue);
+	
 }
 
 static struct request *
-noop_former_request(struct request_queue *q, struct request *rq)
+clook_former_request(struct request_queue *q, struct request *rq)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct clook_data *nd = q->elevator->elevator_data;
 
 	if (rq->queuelist.prev == &nd->queue)
 		return NULL;
@@ -50,18 +110,18 @@ noop_former_request(struct request_queue
 }
 
 static struct request *
-noop_latter_request(struct request_queue *q, struct request *rq)
+clook_latter_request(struct request_queue *q, struct request *rq)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct clook_data *nd = q->elevator->elevator_data;
 
 	if (rq->queuelist.next == &nd->queue)
 		return NULL;
 	return list_entry(rq->queuelist.next, struct request, queuelist);
 }
 
-static int noop_init_queue(struct request_queue *q)
+static int clook_init_queue(struct request_queue *q)
 {
-	struct noop_data *nd;
+	struct clook_data *nd;
 
 	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
 	if (!nd)
@@ -72,42 +132,42 @@ static int noop_init_queue(struct reques
 	return 0;
 }
 
-static void noop_exit_queue(struct elevator_queue *e)
+static void clook_exit_queue(struct elevator_queue *e)
 {
-	struct noop_data *nd = e->elevator_data;
+	struct clook_data *nd = e->elevator_data;
 
 	BUG_ON(!list_empty(&nd->queue));
 	kfree(nd);
 }
 
-static struct elevator_type elevator_noop = {
+static struct elevator_type elevator_clook = {
 	.ops = {
-		.elevator_merge_req_fn		= noop_merged_requests,
-		.elevator_dispatch_fn		= noop_dispatch,
-		.elevator_add_req_fn		= noop_add_request,
-		.elevator_former_req_fn		= noop_former_request,
-		.elevator_latter_req_fn		= noop_latter_request,
-		.elevator_init_fn		= noop_init_queue,
-		.elevator_exit_fn		= noop_exit_queue,
+		.elevator_merge_req_fn		= clook_merged_requests,
+		.elevator_dispatch_fn		= clook_dispatch,
+		.elevator_add_req_fn		= clook_add_request,
+		.elevator_former_req_fn		= clook_former_request,
+		.elevator_latter_req_fn		= clook_latter_request,
+		.elevator_init_fn		= clook_init_queue,
+		.elevator_exit_fn		= clook_exit_queue,
 	},
-	.elevator_name = "noop",
+	.elevator_name = "clook",
 	.elevator_owner = THIS_MODULE,
 };
 
-static int __init noop_init(void)
+static int __init clook_init(void)
 {
-	return elv_register(&elevator_noop);
+	return elv_register(&elevator_clook);
 }
 
-static void __exit noop_exit(void)
+static void __exit clook_exit(void)
 {
-	elv_unregister(&elevator_noop);
+	elv_unregister(&elevator_clook);
 }
 
-module_init(noop_init);
-module_exit(noop_exit);
+module_init(clook_init);
+module_exit(clook_exit);
 
 
-MODULE_AUTHOR("Jens Axboe");
+MODULE_AUTHOR("Leonardo Canizares");
 MODULE_LICENSE("GPL");
-MODULE_DESCRIPTION("No-op IO scheduler");
+MODULE_DESCRIPTION("C-Look IO scheduler");
